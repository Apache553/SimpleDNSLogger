#include "Main.h"#include "Rpc.h"#include "DnsServer.h"#include <iostream>#include <csignal>#include <condition_variable>class Client{public:	Client(std::shared_ptr<grpc::Channel> channel)		: stub(SimpleDNSLogger::DNSLogger::NewStub(channel))	{	}	void TryObserve(const std::string& name)	{		SimpleDNSLogger::ObservationRequest req;		req.set_expectedname(name);		req.mutable_identity()->set_psk("123");		grpc::ClientContext context;		SimpleDNSLogger::ObservationResult result;		context.set_deadline(std::chrono::system_clock::now() + std::chrono::seconds(8));		grpc::Status status = stub->ObserveDnsQuery(&context, req, &result);		if (status.ok())		{			std::cout << "RPC OK: " << result.observedname() << " from: " << result.sender() << '\n';		}		else		{			std::cout << "RPC FAILED: " << status.error_code() << ": " << status.error_message() << '\n';		}	}private:	std::unique_ptr<SimpleDNSLogger::DNSLogger::Stub> stub;};class App{private:	App() = default;public:	static App& GetInstance()	{		static App inst;		return inst;	}	SimpleDNSLogger::DnsServer server;	SimpleDNSLogger::RpcHandler rpc;	std::condition_variable cv;	std::mutex mutex;	bool cancelled = false;	static void CtrlCHandler(int signal)	{		std::unique_lock lg(GetInstance().mutex);		GetInstance().cancelled = true;		GetInstance().cv.notify_one();	}	int Run(int argc, char** argv)	{		std::unique_lock lg(mutex);		std::signal(SIGUSR1, CtrlCHandler);		server.SetListenPort("0.0.0.0", 5588);		server.SetCallback(std::bind(&SimpleDNSLogger::RpcHandler::WitnessDnsQuery, &rpc, std::placeholders::_1,		                             std::placeholders::_2));		server.Run();		rpc.AddPsk("123");		rpc.StartServer("0.0.0.0", 5589);		//Client client(grpc::CreateChannel("127.0.0.1:5589", grpc::InsecureChannelCredentials()));		//while (true) {		//	client.TryObserve("fuckyou.log4j-detect.nep-nep.moe.");		//	std::this_thread::sleep_for(std::chrono::seconds(1));		//}		// wait for cancellation		cv.wait(lg, [this] { return cancelled; });		server.Stop();		rpc.StopServer();		return 0;	}};int main(int argc, char** argv){	return App::GetInstance().Run(argc, argv);}