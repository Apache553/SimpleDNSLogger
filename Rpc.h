#pragma once#include <proto/SimpleDNSLogger.pb.h>#include <proto/SimpleDNSLogger.grpc.pb.h>#include <grpc/grpc.h>#include <grpcpp/server_builder.h>#include <memory>#include <unordered_map>#include <string>#include <thread>namespace SimpleDNSLogger{    class NotificationSubscriptionHandler final    {    private:        std::unique_ptr<grpc::ServerAsyncWriter<DNSLogResult>> writer;    };    class CreateNotificationHandler final    {    private:    };    class ServiceHandler final    {    private:        grpc::ServerContext srvContext;        std::unique_ptr<grpc::ServerCompletionQueue> srvCompleteQueue;        DNSLogger::AsyncService srvService;        std::unique_ptr<grpc::Server> srvServer;        std::unique_ptr<std::thread> srvThread;        std::unordered_map<std::string, std::unique_ptr<NotificationSubscriptionHandler>> sessionMap;    public:        ServiceHandler();        //{        //	std::string serverAddress("0.0.0.0:50051");        //	grpc::ServerBuilder builder;        //	builder.AddListeningPort(serverAddress, grpc::InsecureServerCredentials());        //	builder.RegisterService(&srvService);        //	srvComplQueue = builder.AddCompletionQueue();        //	srvServer = builder.BuildAndStart();        //	// This is important as the server should know when the client is done.        //	// srvContext.AsyncNotifyWhenDone(reinterpret_cast<void*>(Type::DONE));        //	// srvThread.reset();        //	std::cout << "Server listening on " << serverAddress << std::endl;        //}    };}